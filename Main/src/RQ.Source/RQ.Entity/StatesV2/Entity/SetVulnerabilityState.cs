using RQ.Common.Container;
using RQ.Entity.Common;
using RQ.Messaging;
using RQ.Model.Serialization.FSM;
using RQ.Serialization;
using UnityEngine;

namespace RQ.Entity.StatesV2
{
    [AddComponentMenu("RQ/States/State/Entity/Set Vulnerability")]
    public class SetVulnerabilityState : AnimatorState
    {
        //[SerializeField]
        //private SpriteBaseComponent _conversationTrigger;
        [SerializeField]
        private bool _isVulnerable = true;

        public override void Enter()
        {
            base.Enter();
            //if (_conversationTrigger != null)
            //{
            //    var conversationTrigger = _conversationTrigger.GetComponent<ConversationTrigger>();
            //    DialogueManager.StartConversation(conversationTrigger.conversation);
            //}
            _damageComponent.GetDamageData().Vulnerable = _isVulnerable;
            Complete();
        }

        //public override void Serialize(EntitySerializedData entityData)
        //{
        //    base.Serialize(entityData);
        //    var conversationStartData = new ConversationStartData();
        //    conversationStartData.UniqueId = _conversationTrigger.UniqueId;
        //    base.SerializeComponent(entityData, conversationStartData);
        //}

        //public override void Deserialize(EntitySerializedData entityData)
        //{
        //    base.Deserialize(entityData);
        //    var conversationStartData = base.DeserializeComponent<ConversationStartData>(entityData);
        //    if (conversationStartData == null || string.IsNullOrEmpty(conversationStartData.UniqueId))
        //        return;
        //    var entity = EntityContainer._instance.GetEntity(conversationStartData.UniqueId);
        //    if (entity == null)
        //        return;
        //    _conversationTrigger = entity.transform.GetComponent<SpriteBaseComponent>();
        //}
    }
}
